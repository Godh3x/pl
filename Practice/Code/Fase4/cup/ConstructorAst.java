
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sat Jun 23 17:21:39 CEST 2018
//----------------------------------------------------

package cup;

import java_cup.runtime.*;
import lexer.TinyLexer;
import lexer.LexicalItem;
import errors.ErrorManager;
import ast.E;
import ast.LDs;
import ast.LIs;
import ast.Prog;
import ast.ASExp;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sat Jun 23 17:21:39 CEST 2018
  */
public class ConstructorAst extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorAst() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorAst(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorAst(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\040\000\002\002\003\000\002\002\004\000\002\003" +
    "\005\000\002\004\006\000\002\004\006\000\002\004\004" +
    "\000\002\004\004\000\002\005\007\000\002\005\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\003\000\002" +
    "\007\005\000\002\007\005\000\002\007\003\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\003\000" +
    "\002\011\005\000\002\011\005\000\002\011\003\000\002" +
    "\012\004\000\002\012\004\000\002\012\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\076\000\006\032\004\033\007\001\002\000\004\031" +
    "\100\001\002\000\004\002\077\001\002\000\004\002\001" +
    "\001\002\000\004\031\076\001\002\000\006\004\012\005" +
    "\011\001\002\000\006\032\072\033\073\001\002\000\004" +
    "\031\013\001\002\000\004\006\070\001\002\000\006\002" +
    "\uffff\005\015\001\002\000\004\031\016\001\002\000\004" +
    "\006\017\001\002\000\016\017\027\021\020\024\024\026" +
    "\022\027\023\030\025\001\002\000\016\017\027\021\020" +
    "\024\024\026\022\027\023\030\025\001\002\000\012\002" +
    "\ufffa\005\ufffa\020\063\021\064\001\002\000\040\002\uffe5" +
    "\005\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014" +
    "\uffe5\015\uffe5\016\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5" +
    "\025\uffe5\001\002\000\040\002\uffe4\005\uffe4\007\uffe4\010" +
    "\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4" +
    "\020\uffe4\021\uffe4\022\uffe4\023\uffe4\025\uffe4\001\002\000" +
    "\016\017\027\021\020\024\024\026\022\027\023\030\025" +
    "\001\002\000\040\002\uffe3\005\uffe3\007\uffe3\010\uffe3\011" +
    "\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\020\uffe3" +
    "\021\uffe3\022\uffe3\023\uffe3\025\uffe3\001\002\000\040\002" +
    "\uffe6\005\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6" +
    "\014\uffe6\015\uffe6\016\uffe6\020\uffe6\021\uffe6\022\uffe6\023" +
    "\uffe6\025\uffe6\001\002\000\012\024\024\026\022\027\023" +
    "\030\025\001\002\000\040\002\uffe9\005\uffe9\007\uffe9\010" +
    "\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9" +
    "\020\uffe9\021\uffe9\022\uffe9\023\uffe9\025\uffe9\001\002\000" +
    "\040\002\uffec\005\uffec\007\040\010\042\011\043\012\041" +
    "\013\044\014\047\015\uffec\016\uffec\020\uffec\021\uffec\022" +
    "\045\023\046\025\uffec\001\002\000\020\002\ufff3\005\ufff3" +
    "\015\034\016\035\020\ufff3\021\ufff3\025\ufff3\001\002\000" +
    "\014\002\ufff6\005\ufff6\020\ufff6\021\ufff6\025\ufff6\001\002" +
    "\000\016\017\027\021\020\024\024\026\022\027\023\030" +
    "\025\001\002\000\016\017\027\021\020\024\024\026\022" +
    "\027\023\030\025\001\002\000\014\002\ufff4\005\ufff4\020" +
    "\ufff4\021\ufff4\025\ufff4\001\002\000\014\002\ufff5\005\ufff5" +
    "\020\ufff5\021\ufff5\025\ufff5\001\002\000\016\017\027\021" +
    "\020\024\024\026\022\027\023\030\025\001\002\000\016" +
    "\017\027\021\020\024\024\026\022\027\023\030\025\001" +
    "\002\000\016\017\027\021\020\024\024\026\022\027\023" +
    "\030\025\001\002\000\016\017\027\021\020\024\024\026" +
    "\022\027\023\030\025\001\002\000\016\017\027\021\020" +
    "\024\024\026\022\027\023\030\025\001\002\000\016\017" +
    "\027\021\020\024\024\026\022\027\023\030\025\001\002" +
    "\000\016\017\027\021\020\024\024\026\022\027\023\030" +
    "\025\001\002\000\016\017\027\021\020\024\024\026\022" +
    "\027\023\030\025\001\002\000\024\002\uffed\005\uffed\015" +
    "\uffed\016\uffed\020\uffed\021\uffed\022\045\023\046\025\uffed" +
    "\001\002\000\040\002\uffea\005\uffea\007\uffea\010\uffea\011" +
    "\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea\020\uffea" +
    "\021\uffea\022\uffea\023\uffea\025\uffea\001\002\000\040\002" +
    "\uffeb\005\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb" +
    "\014\uffeb\015\uffeb\016\uffeb\020\uffeb\021\uffeb\022\uffeb\023" +
    "\uffeb\025\uffeb\001\002\000\024\002\uffee\005\uffee\015\uffee" +
    "\016\uffee\020\uffee\021\uffee\022\045\023\046\025\uffee\001" +
    "\002\000\024\002\ufff0\005\ufff0\015\ufff0\016\ufff0\020\ufff0" +
    "\021\ufff0\022\045\023\046\025\ufff0\001\002\000\024\002" +
    "\ufff1\005\ufff1\015\ufff1\016\ufff1\020\ufff1\021\ufff1\022\045" +
    "\023\046\025\ufff1\001\002\000\024\002\uffef\005\uffef\015" +
    "\uffef\016\uffef\020\uffef\021\uffef\022\045\023\046\025\uffef" +
    "\001\002\000\024\002\ufff2\005\ufff2\015\ufff2\016\ufff2\020" +
    "\ufff2\021\ufff2\022\045\023\046\025\ufff2\001\002\000\040" +
    "\002\uffe7\005\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013" +
    "\uffe7\014\uffe7\015\uffe7\016\uffe7\020\uffe7\021\uffe7\022\uffe7" +
    "\023\uffe7\025\uffe7\001\002\000\010\020\063\021\064\025" +
    "\062\001\002\000\040\002\uffe2\005\uffe2\007\uffe2\010\uffe2" +
    "\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\020" +
    "\uffe2\021\uffe2\022\uffe2\023\uffe2\025\uffe2\001\002\000\016" +
    "\017\027\021\020\024\024\026\022\027\023\030\025\001" +
    "\002\000\016\017\027\021\020\024\024\026\022\027\023" +
    "\030\025\001\002\000\014\002\ufff8\005\ufff8\020\ufff8\021" +
    "\ufff8\025\ufff8\001\002\000\014\002\ufff7\005\ufff7\020\ufff7" +
    "\021\ufff7\025\ufff7\001\002\000\040\002\uffe8\005\uffe8\007" +
    "\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8" +
    "\016\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\025\uffe8\001" +
    "\002\000\016\017\027\021\020\024\024\026\022\027\023" +
    "\030\025\001\002\000\012\002\ufff9\005\ufff9\020\063\021" +
    "\064\001\002\000\004\031\075\001\002\000\004\031\074" +
    "\001\002\000\006\004\ufffd\005\ufffd\001\002\000\006\004" +
    "\ufffe\005\ufffe\001\002\000\006\004\ufffb\005\ufffb\001\002" +
    "\000\004\002\000\001\002\000\006\004\ufffc\005\ufffc\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\076\000\010\002\004\003\005\004\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\006\020\007\032\010" +
    "\031\011\030\012\027\013\025\001\001\000\006\012\066" +
    "\013\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\006\060\007\032\010\031\011\030" +
    "\012\027\013\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\007" +
    "\036\010\031\011\030\012\027\013\025\001\001\000\012" +
    "\010\035\011\030\012\027\013\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\056\012\027\013\025" +
    "\001\001\000\010\011\055\012\027\013\025\001\001\000" +
    "\010\011\054\012\027\013\025\001\001\000\010\011\053" +
    "\012\027\013\025\001\001\000\010\011\052\012\027\013" +
    "\025\001\001\000\006\012\051\013\025\001\001\000\006" +
    "\012\050\013\025\001\001\000\010\011\047\012\027\013" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\007\065\010" +
    "\031\011\030\012\027\013\025\001\001\000\014\007\064" +
    "\010\031\011\030\012\027\013\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\006\070" +
    "\007\032\010\031\011\030\012\027\013\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorAst$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorAst$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorAst$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

   error = new ErrorManager();
   TinyLexer lexer = (TinyLexer)getScanner();
   lexer.setErrorManager(error);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }


   private ErrorManager error;
   public void syntax_error(Symbol item) {
     error.parser((LexicalItem)item);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorAst$actions {


   private ASExp as = new ASExp();

  private final ConstructorAst parser;

  /** Constructor */
  CUP$ConstructorAst$actions(ConstructorAst parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorAst$do_action_part00000000(
    int                        CUP$ConstructorAst$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorAst$parser,
    java.util.Stack            CUP$ConstructorAst$stack,
    int                        CUP$ConstructorAst$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorAst$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorAst$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= Prog 
            {
              Prog RESULT =null;
		Prog aPROG = (Prog)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.peek()).value;
		 RESULT=aPROG; 
              CUP$ConstructorAst$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$ConstructorAst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Prog start_val = (Prog)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.elementAt(CUP$ConstructorAst$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorAst$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorAst$parser.done_parsing();
          return CUP$ConstructorAst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Prog ::= LDec SPROG LIns 
            {
              Prog RESULT =null;
		LDs aLDEC = (LDs)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.elementAt(CUP$ConstructorAst$top-2)).value;
		LIs aLINS = (LIs)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.peek()).value;
		 RESULT=as.prog(aLDEC, aLINS); 
              CUP$ConstructorAst$result = parser.getSymbolFactory().newSymbol("Prog",1, RESULT);
            }
          return CUP$ConstructorAst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LDec ::= LDec EOL NUM ID 
            {
              LDs RESULT =null;
		LDs aLDEC = (LDs)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.elementAt(CUP$ConstructorAst$top-3)).value;
		String lexNUM = (String)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.elementAt(CUP$ConstructorAst$top-1)).value;
		String lexID = (String)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.peek()).value;
		 RESULT=as.ldec(aLDEC, lexNUM, lexID); 
              CUP$ConstructorAst$result = parser.getSymbolFactory().newSymbol("LDec",2, RESULT);
            }
          return CUP$ConstructorAst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LDec ::= LDec EOL BOOL ID 
            {
              LDs RESULT =null;
		LDs aLDEC = (LDs)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.elementAt(CUP$ConstructorAst$top-3)).value;
		String lexBOOL = (String)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.elementAt(CUP$ConstructorAst$top-1)).value;
		String lexID = (String)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.peek()).value;
		 RESULT=as.ldec(aLDEC, lexBOOL, lexID); 
              CUP$ConstructorAst$result = parser.getSymbolFactory().newSymbol("LDec",2, RESULT);
            }
          return CUP$ConstructorAst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LDec ::= NUM ID 
            {
              LDs RESULT =null;
		String lexNUM = (String)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.elementAt(CUP$ConstructorAst$top-1)).value;
		String lexID = (String)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.peek()).value;
		 RESULT=as.dec(lexNUM, lexID); 
              CUP$ConstructorAst$result = parser.getSymbolFactory().newSymbol("LDec",2, RESULT);
            }
          return CUP$ConstructorAst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LDec ::= BOOL ID 
            {
              LDs RESULT =null;
		String lexBOOL = (String)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.elementAt(CUP$ConstructorAst$top-1)).value;
		String lexID = (String)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.peek()).value;
		 RESULT=as.dec(lexBOOL, lexID); 
              CUP$ConstructorAst$result = parser.getSymbolFactory().newSymbol("LDec",2, RESULT);
            }
          return CUP$ConstructorAst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LIns ::= LIns EOL ID IS Exp0 
            {
              LIs RESULT =null;
		LIs aLINS = (LIs)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.elementAt(CUP$ConstructorAst$top-4)).value;
		String lexID = (String)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.elementAt(CUP$ConstructorAst$top-2)).value;
		E aEXP0 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.peek()).value;
		 RESULT=as.lins(aLINS, lexID, aEXP0); 
              CUP$ConstructorAst$result = parser.getSymbolFactory().newSymbol("LIns",3, RESULT);
            }
          return CUP$ConstructorAst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LIns ::= ID IS Exp0 
            {
              LIs RESULT =null;
		String lexID = (String)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.elementAt(CUP$ConstructorAst$top-2)).value;
		E aEXP0 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.peek()).value;
		 RESULT=as.ins(lexID, aEXP0); 
              CUP$ConstructorAst$result = parser.getSymbolFactory().newSymbol("LIns",3, RESULT);
            }
          return CUP$ConstructorAst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Exp0 ::= Exp0 MINUS Exp1 
            {
              E RESULT =null;
		E aEXP0 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.elementAt(CUP$ConstructorAst$top-2)).value;
		E aEXP1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.peek()).value;
		 RESULT=as.minus(aEXP0, aEXP1); 
              CUP$ConstructorAst$result = parser.getSymbolFactory().newSymbol("Exp0",4, RESULT);
            }
          return CUP$ConstructorAst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Exp0 ::= Exp0 PLUS Exp1 
            {
              E RESULT =null;
		E aEXP0 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.elementAt(CUP$ConstructorAst$top-2)).value;
		E aEXP1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.peek()).value;
		 RESULT=as.plus(aEXP0, aEXP1); 
              CUP$ConstructorAst$result = parser.getSymbolFactory().newSymbol("Exp0",4, RESULT);
            }
          return CUP$ConstructorAst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Exp0 ::= Exp1 
            {
              E RESULT =null;
		E aEXP1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.peek()).value;
		 RESULT=aEXP1; 
              CUP$ConstructorAst$result = parser.getSymbolFactory().newSymbol("Exp0",4, RESULT);
            }
          return CUP$ConstructorAst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Exp1 ::= Exp2 AND Exp1 
            {
              E RESULT =null;
		E aEXP2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.elementAt(CUP$ConstructorAst$top-2)).value;
		Object lexAND = (Object)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.elementAt(CUP$ConstructorAst$top-1)).value;
		E aEXP1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.peek()).value;
		 RESULT=as.and(aEXP2, aEXP1); 
              CUP$ConstructorAst$result = parser.getSymbolFactory().newSymbol("Exp1",5, RESULT);
            }
          return CUP$ConstructorAst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Exp1 ::= Exp2 OR Exp2 
            {
              E RESULT =null;
		E aEXP20 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.elementAt(CUP$ConstructorAst$top-2)).value;
		Object lexOR = (Object)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.elementAt(CUP$ConstructorAst$top-1)).value;
		E aEXP21 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.peek()).value;
		 RESULT=as.or(aEXP20, aEXP21); 
              CUP$ConstructorAst$result = parser.getSymbolFactory().newSymbol("Exp1",5, RESULT);
            }
          return CUP$ConstructorAst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Exp1 ::= Exp2 
            {
              E RESULT =null;
		E aEXP2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.peek()).value;
		 RESULT=aEXP2; 
              CUP$ConstructorAst$result = parser.getSymbolFactory().newSymbol("Exp1",5, RESULT);
            }
          return CUP$ConstructorAst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Exp2 ::= Exp3 EQ Exp3 
            {
              E RESULT =null;
		E aEXP30 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.elementAt(CUP$ConstructorAst$top-2)).value;
		E aEXP31 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.peek()).value;
		 RESULT=as.eq(aEXP30, aEXP31); 
              CUP$ConstructorAst$result = parser.getSymbolFactory().newSymbol("Exp2",6, RESULT);
            }
          return CUP$ConstructorAst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Exp2 ::= Exp3 GT Exp3 
            {
              E RESULT =null;
		E aEXP30 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.elementAt(CUP$ConstructorAst$top-2)).value;
		E aEXP31 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.peek()).value;
		 RESULT=as.gt(aEXP30, aEXP31); 
              CUP$ConstructorAst$result = parser.getSymbolFactory().newSymbol("Exp2",6, RESULT);
            }
          return CUP$ConstructorAst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Exp2 ::= Exp3 GEQ Exp3 
            {
              E RESULT =null;
		E aEXP30 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.elementAt(CUP$ConstructorAst$top-2)).value;
		E aEXP31 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.peek()).value;
		 RESULT=as.geq(aEXP30, aEXP31); 
              CUP$ConstructorAst$result = parser.getSymbolFactory().newSymbol("Exp2",6, RESULT);
            }
          return CUP$ConstructorAst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Exp2 ::= Exp3 LT Exp3 
            {
              E RESULT =null;
		E aEXP30 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.elementAt(CUP$ConstructorAst$top-2)).value;
		E aEXP31 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.peek()).value;
		 RESULT=as.lt(aEXP30, aEXP31); 
              CUP$ConstructorAst$result = parser.getSymbolFactory().newSymbol("Exp2",6, RESULT);
            }
          return CUP$ConstructorAst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Exp2 ::= Exp3 LEQ Exp3 
            {
              E RESULT =null;
		E aEXP30 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.elementAt(CUP$ConstructorAst$top-2)).value;
		E aEXP31 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.peek()).value;
		 RESULT=as.leq(aEXP30, aEXP31); 
              CUP$ConstructorAst$result = parser.getSymbolFactory().newSymbol("Exp2",6, RESULT);
            }
          return CUP$ConstructorAst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Exp2 ::= Exp3 NEQ Exp3 
            {
              E RESULT =null;
		E aEXP30 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.elementAt(CUP$ConstructorAst$top-2)).value;
		E aEXP31 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.peek()).value;
		 RESULT=as.neq(aEXP30, aEXP31); 
              CUP$ConstructorAst$result = parser.getSymbolFactory().newSymbol("Exp2",6, RESULT);
            }
          return CUP$ConstructorAst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Exp2 ::= Exp3 
            {
              E RESULT =null;
		E aEXP3 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.peek()).value;
		 RESULT=aEXP3; 
              CUP$ConstructorAst$result = parser.getSymbolFactory().newSymbol("Exp2",6, RESULT);
            }
          return CUP$ConstructorAst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Exp3 ::= Exp3 MUL Exp4 
            {
              E RESULT =null;
		E aEXP3 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.elementAt(CUP$ConstructorAst$top-2)).value;
		E aEXP4 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.peek()).value;
		 RESULT=as.mul(aEXP3, aEXP4); 
              CUP$ConstructorAst$result = parser.getSymbolFactory().newSymbol("Exp3",7, RESULT);
            }
          return CUP$ConstructorAst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Exp3 ::= Exp3 DIV Exp4 
            {
              E RESULT =null;
		E aEXP3 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.elementAt(CUP$ConstructorAst$top-2)).value;
		E aEXP4 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.peek()).value;
		 RESULT=as.div(aEXP3, aEXP4); 
              CUP$ConstructorAst$result = parser.getSymbolFactory().newSymbol("Exp3",7, RESULT);
            }
          return CUP$ConstructorAst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Exp3 ::= Exp4 
            {
              E RESULT =null;
		E aEXP4 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.peek()).value;
		 RESULT=aEXP4; 
              CUP$ConstructorAst$result = parser.getSymbolFactory().newSymbol("Exp3",7, RESULT);
            }
          return CUP$ConstructorAst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Exp4 ::= MINUS Exp4 
            {
              E RESULT =null;
		E aEXP4 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.peek()).value;
		 RESULT=as.sign(aEXP4); 
              CUP$ConstructorAst$result = parser.getSymbolFactory().newSymbol("Exp4",8, RESULT);
            }
          return CUP$ConstructorAst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Exp4 ::= NOT Exp5 
            {
              E RESULT =null;
		E aEXP5 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.peek()).value;
		 RESULT=as.not(aEXP5); 
              CUP$ConstructorAst$result = parser.getSymbolFactory().newSymbol("Exp4",8, RESULT);
            }
          return CUP$ConstructorAst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Exp4 ::= Exp5 
            {
              E RESULT =null;
		E aEXP5 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.peek()).value;
		 RESULT=aEXP5; 
              CUP$ConstructorAst$result = parser.getSymbolFactory().newSymbol("Exp4",8, RESULT);
            }
          return CUP$ConstructorAst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Exp5 ::= LREAL 
            {
              E RESULT =null;
		String lexLREAL = (String)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.peek()).value;
		 RESULT=as.num(lexLREAL); 
              CUP$ConstructorAst$result = parser.getSymbolFactory().newSymbol("Exp5",9, RESULT);
            }
          return CUP$ConstructorAst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Exp5 ::= TRUE 
            {
              E RESULT =null;
		 RESULT=as.true_f(); 
              CUP$ConstructorAst$result = parser.getSymbolFactory().newSymbol("Exp5",9, RESULT);
            }
          return CUP$ConstructorAst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Exp5 ::= FALSE 
            {
              E RESULT =null;
		 RESULT=as.false_f(); 
              CUP$ConstructorAst$result = parser.getSymbolFactory().newSymbol("Exp5",9, RESULT);
            }
          return CUP$ConstructorAst$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Exp5 ::= POP Exp0 PCL 
            {
              E RESULT =null;
		E aEXP0 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAst$stack.elementAt(CUP$ConstructorAst$top-1)).value;
		 RESULT=aEXP0; 
              CUP$ConstructorAst$result = parser.getSymbolFactory().newSymbol("Exp5",9, RESULT);
            }
          return CUP$ConstructorAst$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorAst$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorAst$do_action(
    int                        CUP$ConstructorAst$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorAst$parser,
    java.util.Stack            CUP$ConstructorAst$stack,
    int                        CUP$ConstructorAst$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorAst$do_action_part00000000(
                               CUP$ConstructorAst$act_num,
                               CUP$ConstructorAst$parser,
                               CUP$ConstructorAst$stack,
                               CUP$ConstructorAst$top);
    }
}

