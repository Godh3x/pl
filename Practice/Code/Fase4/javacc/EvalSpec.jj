options  {
  STATIC=false;
}
PARSER_BEGIN(Eval)
package javacc;

import ast.*;

public class Eval {
  private ASExp as = new ASExp();

  /* Operation codes */
  private static final int PLUS = 0;
  private static final int MINUS = 1;
  private static final int MUL = 2;
  private static final int DIV = 3;
  private static final int AND = 4;
  private static final int OR = 5;
  private static final int EQ = 6;
  private static final int GT = 7;
  private static final int GEQ = 8;
  private static final int LT = 9;
  private static final int LEQ = 10;
  private static final int NEQ = 11;
  private static final int NOT = 12;
  private static final int SIGN = 13;

  /* Binary Operation Decode */
  private E mkexpb(int op, E opnd1, E opnd2) {
    switch(op) {
      case PLUS:
        return as.plus(opnd1, opnd2);
      case MINUS:
        return as.minus(opnd1, opnd2);
      case MUL:
        return as.mul(opnd1, opnd2);
      case DIV:
        return as.div(opnd1, opnd2);
      case AND:
        return as.and(opnd1, opnd2);
      case OR:
        return as.or(opnd1, opnd2);
      case EQ:
        return as.eq(opnd1, opnd2);
      case GT:
        return as.gt(opnd1, opnd2);
      case GEQ:
        return as.geq(opnd1, opnd2);
      case LT:
        return as.lt(opnd1, opnd2);
      case LEQ:
        return as.leq(opnd1, opnd2);
      case NEQ:
        return as.neq(opnd1, opnd2);
      default:
        throw new IllegalArgumentException("Invalid binary operation code: " + op);
    }
  }

  /* Unary Operation Decode */
  private E mkexpu(int op, E opnd) {
    switch(op) {
      case NOT:
        return as.not(opnd);
      case SIGN:
        return as.sign(opnd);
      default:
        throw new IllegalArgumentException("Invalid unary operation code: " + op);
    }
  }
}
PARSER_END(Eval)

  TOKEN:{<#letter:["a"-"z","A"-"Z"]>}
  TOKEN:{<#dig:["0"-"9"]>}
  TOKEN:{<#sign:["+","-"]>}
  TOKEN:{<#pdec:"." (<dig>)* <dig>>}
  TOKEN:{<#pexp:["e","E"] <lent>>}
  SKIP:{<["\t"," ","\r","\b","\n"]>}
  TOKEN: {<bool:"bool">}
  TOKEN: {<num:"num">}
  TOKEN: {<t:"true">}
  TOKEN: {<f:"false">}
  TOKEN: {<and:"and">}
  TOKEN: {<or:"or">}
  TOKEN: {<not:"not">}
  TOKEN:{<id:<letter>(<letter>|<dig>|"_")*>}
  TOKEN:{<lent:(<sign>)? (<dig>)* <dig>>}
  TOKEN:{<ldec:<lent> <pdec>>}
  TOKEN:{<lexp:(<lent>|<ldec>) <pexp>>}

  Prog S() : {Prog t;} {
      t=Prog()
      <EOF>
      {return t;}
    }
  Prog Prog() : {LDs ldec; LIs lins;} {
      ldec=SDec()
      "&&"
      lins=SIns()
      {return as.prog(ldec, lins);}
    }
  LDs SDec() : {TLDs dec; LDs aLDec;} {
      dec=Dec()
      aLDec=LDec(as.dec(dec.type, dec.id))
      {return aLDec;}
    }
  LDs LDec(LDs ahLDec0) : {TLDs dec; LDs aLDec1;} {
      ";"
      dec=Dec()
      aLDec1=LDec(as.ldec(ahLDec0, dec.type, dec.id))
      {return aLDec1;} |
      {return ahLDec0;}
    }
  LIs SIns() : {TLIs ins; LIs aLIns;} {
      ins=Ins()
      aLIns=LIns(as.ins(ins.id, ins.exp))
      {return aLIns;}
    }
  LIs LIns(LIs ahLIns0) : {TLIs ins; LIs aLIns1;} {
      ";"
      ins=Ins()
      aLIns1=LIns(as.lins(ahLIns0, ins.id, ins.exp))
      {return aLIns1;} |
      {return ahLIns0;}
    }
  TLDs Dec() : {Token type; Token iden;} {
      type=<num>
      iden=<id>
      {return new TLDs(type.image, iden.image);} |
      type=<bool>
      iden=<id>
      {return new TLDs(type.image, iden.image);}
    }
  TLIs Ins() : {Token iden; E exp;} {
      iden=<id>
      "="
      exp=E0()
      {return new TLIs(iden.image, exp);}
    }
  E E0() : {E aE1; E aR0;} {
      aE1=E1()
      aR0=R0(aE1)
      {return aR0;}
    }
  E R0(E ahR0) : {int op; E aE1; E aR0;} {
      op=Op0()
      aE1=E1()
      aR0=R0(mkexpb(op, ahR0, aE1))
      {return aR0;} |
      {return ahR0;}
    }
  E E1() : {E aE2; E aR1;} {
      aE2=E2()
      aR1=R1(aE2)
      {return aR1;}
    }
  E R1(E ahR1) : {int op; E aE2; E aR1;} {
      op=And()
      aE2=E2()
      aR1=R1(mkexpb(op, ahR1, aE2))
      {return aR1;} |
      op=Or()
      aE2=E2()
      aR1=R1(mkexpb(op, ahR1, aE2))
      {return aR1;} |
      {return ahR1;}
    }
  E E2() : {E aE3; E aR2;} {
      aE3=E3()
      aR2=R2(aE3)
      {return aR2;}
    }
  E R2(E ahR2) : {int op; E aE3; E aR2;} {
      op=Op2()
      aE3=E3()
      aR2=R2(mkexpb(op, ahR2, aE3))
      {return aR2;} |
      {return ahR2;}
    }
  E E3() : {E aE4; E aR3;} {
      aE4=E4()
      aR3=R3(aE4)
      {return aR3;}
    }
  E R3(E ahR3) : {int op; E aE4; E aR3;} {
      op=Op3()
      aE4=E4()
      aR3=R3(mkexpb(op, ahR3, aE4))
      {return aR3;} |
      {return ahR3;}
    }
  E E4() : {int op; E aExp;} {
      op=Sign()
      aExp=E4()
      {return mkexpu(op, aExp);} |
      op=Not()
      aExp=E5()
      {return mkexpu(op, aExp);} |
      aExp=E5()
      {return aExp;}
    }
  E E5() : {Token tok; E aE0;} {
      tok=<lent>
      {return as.num(tok.image);} |
      tok=<ldec>
      {return as.num(tok.image);} |
      tok=<lexp>
      {return as.num(tok.image);} |
      <t>
      {return as.true_f();} |
      <f>
      {return as.false_f();} |
      "("
      aE0=E0()
      ")"
      {return aE0;}
    }
  int Op0() : {} {
      "+"
      {return PLUS;} |
      "-"
      {return MINUS;}
    }
  int Op2() : {} {
      "=="
      {return EQ;} |
      ">"
      {return GT;} |
      ">="
      {return GEQ;} |
      "<"
      {return LT;} |
      "<="
      {return LEQ;} |
      "!="
      {return NEQ;}
    }
  int Op3() : {} {
      "*"
      {return MUL;} |
      "/"
      {return DIV;}
    }
  int And() : {} {
      <and>
      {return AND;}
    }
  int Or() : {} {
      <or>
      {return OR;}
    }
  int Not() : {} {
      <not>
      {return NOT;}
    }
  int Sign() : {} {
      "-"
      {return SIGN;}
    }