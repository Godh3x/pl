/* Eval.java */
/* Generated By:JavaCC: Do not edit this line. Eval.java */
package javacc;

import ast.*;

public class Eval implements EvalConstants {
  private ASExp as = new ASExp();

  /* Operation codes */
  private static final int PLUS = 0;
  private static final int MINUS = 1;
  private static final int MUL = 2;
  private static final int DIV = 3;
  private static final int AND = 4;
  private static final int OR = 5;
  private static final int EQ = 6;
  private static final int GT = 7;
  private static final int GEQ = 8;
  private static final int LT = 9;
  private static final int LEQ = 10;
  private static final int NEQ = 11;
  private static final int NOT = 12;
  private static final int SIGN = 13;

  /* Binary Operation Decode */
  private E mkexpb(int op, E opnd1, E opnd2) {
    switch(op) {
      case PLUS:
        return as.plus(opnd1, opnd2);
      case MINUS:
        return as.minus(opnd1, opnd2);
      case MUL:
        return as.mul(opnd1, opnd2);
      case DIV:
        return as.div(opnd1, opnd2);
      case AND:
        return as.and(opnd1, opnd2);
      case OR:
        return as.or(opnd1, opnd2);
      case EQ:
        return as.eq(opnd1, opnd2);
      case GT:
        return as.gt(opnd1, opnd2);
      case GEQ:
        return as.geq(opnd1, opnd2);
      case LT:
        return as.lt(opnd1, opnd2);
      case LEQ:
        return as.leq(opnd1, opnd2);
      case NEQ:
        return as.neq(opnd1, opnd2);
      default:
        throw new IllegalArgumentException("Invalid binary operation code: " + op);
    }
  }

  /* Unary Operation Decode */
  private E mkexpu(int op, E opnd) {
    switch(op) {
      case NOT:
        return as.not(opnd);
      case SIGN:
        return as.sign(opnd);
      default:
        throw new IllegalArgumentException("Invalid unary operation code: " + op);
    }
  }

  final public Prog S() throws ParseException {Prog t;
    t = Prog();
    jj_consume_token(0);
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Prog Prog() throws ParseException {LDs ldec; LIs lins;
    ldec = SDec();
    jj_consume_token(18);
    lins = SIns();
{if ("" != null) return as.prog(ldec, lins);}
    throw new Error("Missing return statement in function");
  }

  final public LDs SDec() throws ParseException {TLDs dec; LDs aLDec;
    dec = Dec();
    aLDec = LDec(as.dec(dec.type, dec.id));
{if ("" != null) return aLDec;}
    throw new Error("Missing return statement in function");
  }

  final public LDs LDec(LDs ahLDec0) throws ParseException {TLDs dec; LDs aLDec1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 19:{
      jj_consume_token(19);
      dec = Dec();
      aLDec1 = LDec(as.ldec(ahLDec0, dec.type, dec.id));
{if ("" != null) return aLDec1;}
      break;
      }
    default:
      jj_la1[0] = jj_gen;
{if ("" != null) return ahLDec0;}
    }
    throw new Error("Missing return statement in function");
  }

  final public LIs SIns() throws ParseException {TLIs ins; LIs aLIns;
    ins = Ins();
    aLIns = LIns(as.ins(ins.id, ins.exp));
{if ("" != null) return aLIns;}
    throw new Error("Missing return statement in function");
  }

  final public LIs LIns(LIs ahLIns0) throws ParseException {TLIs ins; LIs aLIns1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 19:{
      jj_consume_token(19);
      ins = Ins();
      aLIns1 = LIns(as.lins(ahLIns0, ins.id, ins.exp));
{if ("" != null) return aLIns1;}
      break;
      }
    default:
      jj_la1[1] = jj_gen;
{if ("" != null) return ahLIns0;}
    }
    throw new Error("Missing return statement in function");
  }

  final public TLDs Dec() throws ParseException {Token type; Token iden;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case num:{
      type = jj_consume_token(num);
      iden = jj_consume_token(id);
{if ("" != null) return new TLDs(type.image, iden.image);}
      break;
      }
    case bool:{
      type = jj_consume_token(bool);
      iden = jj_consume_token(id);
{if ("" != null) return new TLDs(type.image, iden.image);}
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public TLIs Ins() throws ParseException {Token iden; E exp;
    iden = jj_consume_token(id);
    jj_consume_token(20);
    exp = E0();
{if ("" != null) return new TLIs(iden.image, exp);}
    throw new Error("Missing return statement in function");
  }

  final public E E0() throws ParseException {E aE1; E aR0;
    aE1 = E1();
    aR0 = R0(aE1);
{if ("" != null) return aR0;}
    throw new Error("Missing return statement in function");
  }

  final public E R0(E ahR0) throws ParseException {int op; E aE1; E aR0;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 23:
    case 24:{
      op = Op0();
      aE1 = E1();
      aR0 = R0(mkexpb(op, ahR0, aE1));
{if ("" != null) return aR0;}
      break;
      }
    default:
      jj_la1[3] = jj_gen;
{if ("" != null) return ahR0;}
    }
    throw new Error("Missing return statement in function");
  }

  final public E E1() throws ParseException {E aE2; E aR1;
    aE2 = E2();
    aR1 = R1(aE2);
{if ("" != null) return aR1;}
    throw new Error("Missing return statement in function");
  }

  final public E R1(E ahR1) throws ParseException {int op; E aE2; E aR1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case and:{
      op = And();
      aE2 = E2();
      aR1 = R1(mkexpb(op, ahR1, aE2));
{if ("" != null) return aR1;}
      break;
      }
    case or:{
      op = Or();
      aE2 = E2();
      aR1 = R1(mkexpb(op, ahR1, aE2));
{if ("" != null) return aR1;}
      break;
      }
    default:
      jj_la1[4] = jj_gen;
{if ("" != null) return ahR1;}
    }
    throw new Error("Missing return statement in function");
  }

  final public E E2() throws ParseException {E aE3; E aR2;
    aE3 = E3();
    aR2 = R2(aE3);
{if ("" != null) return aR2;}
    throw new Error("Missing return statement in function");
  }

  final public E R2(E ahR2) throws ParseException {int op; E aE3; E aR2;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:{
      op = Op2();
      aE3 = E3();
      aR2 = R2(mkexpb(op, ahR2, aE3));
{if ("" != null) return aR2;}
      break;
      }
    default:
      jj_la1[5] = jj_gen;
{if ("" != null) return ahR2;}
    }
    throw new Error("Missing return statement in function");
  }

  final public E E3() throws ParseException {E aE4; E aR3;
    aE4 = E4();
    aR3 = R3(aE4);
{if ("" != null) return aR3;}
    throw new Error("Missing return statement in function");
  }

  final public E R3(E ahR3) throws ParseException {int op; E aE4; E aR3;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 31:
    case 32:{
      op = Op3();
      aE4 = E4();
      aR3 = R3(mkexpb(op, ahR3, aE4));
{if ("" != null) return aR3;}
      break;
      }
    default:
      jj_la1[6] = jj_gen;
{if ("" != null) return ahR3;}
    }
    throw new Error("Missing return statement in function");
  }

  final public E E4() throws ParseException {int op; E aExp;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 24:{
      op = Sign();
      aExp = E4();
{if ("" != null) return mkexpu(op, aExp);}
      break;
      }
    case not:{
      op = Not();
      aExp = E5();
{if ("" != null) return mkexpu(op, aExp);}
      break;
      }
    case t:
    case f:
    case lent:
    case ldec:
    case lexp:
    case 21:{
      aExp = E5();
{if ("" != null) return aExp;}
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public E E5() throws ParseException {Token tok; E aE0;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case lent:{
      tok = jj_consume_token(lent);
{if ("" != null) return as.num(tok.image);}
      break;
      }
    case ldec:{
      tok = jj_consume_token(ldec);
{if ("" != null) return as.num(tok.image);}
      break;
      }
    case lexp:{
      tok = jj_consume_token(lexp);
{if ("" != null) return as.num(tok.image);}
      break;
      }
    case t:{
      jj_consume_token(t);
{if ("" != null) return as.true_f();}
      break;
      }
    case f:{
      jj_consume_token(f);
{if ("" != null) return as.false_f();}
      break;
      }
    case 21:{
      jj_consume_token(21);
      aE0 = E0();
      jj_consume_token(22);
{if ("" != null) return aE0;}
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public int Op0() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 23:{
      jj_consume_token(23);
{if ("" != null) return PLUS;}
      break;
      }
    case 24:{
      jj_consume_token(24);
{if ("" != null) return MINUS;}
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public int Op2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 25:{
      jj_consume_token(25);
{if ("" != null) return EQ;}
      break;
      }
    case 26:{
      jj_consume_token(26);
{if ("" != null) return GT;}
      break;
      }
    case 27:{
      jj_consume_token(27);
{if ("" != null) return GEQ;}
      break;
      }
    case 28:{
      jj_consume_token(28);
{if ("" != null) return LT;}
      break;
      }
    case 29:{
      jj_consume_token(29);
{if ("" != null) return LEQ;}
      break;
      }
    case 30:{
      jj_consume_token(30);
{if ("" != null) return NEQ;}
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public int Op3() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 31:{
      jj_consume_token(31);
{if ("" != null) return MUL;}
      break;
      }
    case 32:{
      jj_consume_token(32);
{if ("" != null) return DIV;}
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public int And() throws ParseException {
    jj_consume_token(and);
{if ("" != null) return AND;}
    throw new Error("Missing return statement in function");
  }

  final public int Or() throws ParseException {
    jj_consume_token(or);
{if ("" != null) return OR;}
    throw new Error("Missing return statement in function");
  }

  final public int Not() throws ParseException {
    jj_consume_token(not);
{if ("" != null) return NOT;}
    throw new Error("Missing return statement in function");
  }

  final public int Sign() throws ParseException {
    jj_consume_token(24);
{if ("" != null) return SIGN;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public EvalTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[12];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80000,0x80000,0x180,0x1800000,0x1800,0x7e000000,0x80000000,0x123a600,0x238600,0x1800000,0x7e000000,0x80000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,};
   }

  /** Constructor with InputStream. */
  public Eval(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Eval(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new EvalTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Eval(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new EvalTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Eval(EvalTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(EvalTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[33];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 12; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 33; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
